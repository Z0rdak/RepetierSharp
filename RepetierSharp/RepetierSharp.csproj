<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <OutputType>Library</OutputType>
        <TargetFrameworks>net8.0;net9.0</TargetFrameworks>
        <Title>RepetierSharp</Title>
        <AssemblyName>RepetierSharp</AssemblyName>
        <RootNamespace>RepetierSharp</RootNamespace>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Authors>Marcel Bartholet</Authors>
        <Company/>
        <Description>
            RepetierSharp is a client for communication with the repetier server software (https://www.repetier-server.com/).
            It's an event-driven, easy to use client with a fluent api, which uses the http and websocket API of the repetier server to control your 3d printers and get information about them.
        </Description>
        <Copyright/>
        <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
        <PackageProjectUrl>https://www.nuget.org/packages/RepetierSharp/</PackageProjectUrl>
        <RepositoryUrl>https://github.com/Z0rdak/RepetierSharp</RepositoryUrl>
        <AssemblyVersion>0.2.0.0</AssemblyVersion>
        <FileVersion>0.2.0.0</FileVersion>
        <Version>0.2.0</Version>
        <PackageVersion>0.2.0</PackageVersion>
        <NeutralLanguage>en</NeutralLanguage>
        <PackageTags>Repetier-Server, 3D-Printing, Websocket, API-Client</PackageTags>   
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <SignAssembly>false</SignAssembly>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <RepositoryType>git</RepositoryType>
        <Nullable>enable</Nullable>
        <PackageReleaseNotes>
            # [0.2.0] - 2025-03-25

            ## Added

            * Add proper logging support for the RepetierConnection instead of using Console.WriteLine. You can supply your own logger when using the RepetierConnectionBuilder or use a default console logger.
            * Add a whole array of new events which are triggered for the repetier server events and other client related events.
            * Add more dedicated events and event handlers for print job related events
            * Add a filter for events and commands (and their responses) for the RepetierConnectionBuilder. This filters events so they don't get fired in the first place.
            * Add separate .snupkg for debugging symbols

            ## Changed

            * Reimplemented the event system to be async. It is still possible to register event handlers for the events of a
            repetier connection.
            Credit to the authors of [MQTTnet](https://github.com/dotnet/MQTTnet) for the inspiration on how to implement this.
            * All Http requests are now async. This mainly is relevant for the methods which upload gcode files or upload and start
            gcode.
            * ``ActivatePrinter`` and ``DeactivePrinter`` no longer select the active printer to send commands to. Instead, they work like the repetier server api describes them. Set the `SelectedPrinter` for this: `repetierCon.SelectedPrinter = "AwesomePrinterSlug"`. Alternatively you can select the printer when setting up the connection with the ``RepetierConnectionBuilder``.
            * Streamlined the ``RepetierConnectionBuilder``. It's possible to supply a ``RestClient`` and/or
            a ``WebsocketClient`` instance directly.
            This gives more flexibility to the end user and makes it easier to set up a correct ``RepetierConnection``. Please refer
            to the readme for code examples.
            * Split commands into PrinterCommand and ServerCommand. PrinterCommands require a printer slug to address the proper printer.
            * Extract HttpRequests (upload, getServerInfo, etc. ) into its own abstraction: `RemoteRepetierServer`
            * Extract PrinterCommands (websocket commands) into its own abstraction: `RemoteRepetierPrinter`
            * Reworked whole serialization and event and response handling.
            * Updated System.Text.Json to 9.0.3
            * Updated Microsoft.Extensions.* to 9.0.3
            * Updated RestSharp to 112.1.0
            * Rename the ``RepetierConnectionBuilder`` method ``WithCyclicCommand`` to ``ScheduleCommand``
            * Rename ``GetRepetierServerInfoAsync`` to ``GetRepetierServerInfo``
            * PingInterval is now called `KeepAlivePing`, is a TimeSpan and moved in ``RepetierSession``
            * Move some properties from the `RepetierSession` to type ``RepetierAuthentication``. This includes only the info which needs to be supplied whenever a `loginRequired` event is fired. When supplied with the `RepetierConnectionBuilder` this is automatically used for authentication.
            * Implement custom JsonSerializer for repetier server events to streamline to process of deserializing the events. It is possible to add custom event entries to a dictionary in the `RepetierEventConverter` alongside with a type which is used for deserialization.
            * A **lot** of internal refactoring

            ## Removed

            * Drop support for .net6.0
            * SelectedPrinter property from RepetierConnection
            * Various overloads and confusing methods for building a RepetierConnection instance when using the builder.
            * Helper methods for the ``RepetierConnectionBuilder`` which could be used to schedule querying the printer state and printer list. That's now all covered by the `ScheduleCommand` method.

            ## Fixed

            * Too many bugs to track
        </PackageReleaseNotes>
        <!-- Disable  Warning CS8618 globally. 99% occourance of this is in POCOs where it does not matter at all -->
        <NoWarn>CS8618</NoWarn> 
        <!-- https://learn.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg -->
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>        
        <!-- Include symbol files (*.pdb) in the built .nupkg -->
        <!-- <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder> -->
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.3" />
        <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="9.0.3" />
        <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="9.0.3" />
        <PackageReference Include="RestSharp" Version="112.1.0" />
        <PackageReference Include="System.Text.Json" Version="9.0.3" />
        <PackageReference Include="Websocket.Client" Version="5.1.2"/>
    </ItemGroup>
    <ItemGroup>
        <None Include="LICENSE.txt">
            <Pack>True</Pack>
            <PackagePath>/</PackagePath>
        </None>
    </ItemGroup>

    <ItemGroup>
        <None Include="README.md">
            <Pack>True</Pack>
            <PackagePath>/</PackagePath>
        </None>
    </ItemGroup>
</Project>
